DEBUG="True"
SITE_NAME="NextGen Bank"
SECRET_KEY="bAGW9lsO5aR_6UUQvCzWMwDPwGTdoLtiUzrcKJM5pqkz2yUJGPU"
ADMIN_URL="supersecret/"
EMAIL_PORT="1025"
EMAIL_HOST="mailpit"
DEFAULT_FROM_EMAIL="NexGen Bank <noreply@nextgentbank.com>"
DOMAIN="localhost:8080"
POSTGRES_HOST="postgres"
POSTGRES_PORT="5432"
POSTGRES_DB="banker"
POSTGRES_PASSWORD="Pass123456"
BANK_NAME="NextGen Bank"



https://docs.djangoproject.com/en/5.2/topics/auth/passwords/

$ mkdir -p settings && touch settings/{**init**,base,local,production}.py

mkdir -p requirements && touch requirements/{base,local,production}.txt
(django-bank)

python -c "import secrets; print(secrets.token_urlsafe(38))"



USER@PCWORK MINGW64 ~/Documents/udemy/django-bank (main)
$ mkdir -p docker/local/postgres && touch docker/local/postgres/Dockerfile
(django-bank)
USER@PCWORK MINGW64 ~/Documents/udemy/django-bank (main)
$ docker network create banker_local_nw
40ecc854fa6c433d498e66b88880984fd865a2c6a7d42db100f5b3e407b97a72
(django-bank)
USER@PCWORK MINGW64 ~/Documents/udemy/django-bank (main)
$ docker network ls
NETWORK ID     NAME                                  DRIVER    SCOPE
40ecc854fa6c   banker_local_nw                       bridge    local
78502f3779b2   bridge                                bridge    local
e052e1de5cb7   connectix-backend_default             bridge    local
7af862817e56   connectix-test-v01_default            bridge    local
05ece8493bd0   connectix-test_default                bridge    local
b757fb2a49ae   connectix-test_v01_default            bridge    local
cc88a6b3bf27   connectix-test_v02_default            bridge    local
3bd929feae52   drf-django-tenants-skeleton_default   bridge    local
b52b5cbeea0e   host                                  host      local
a9745d2dbb03   my-docker-project_default             bridge    local
373aba7a95f1   none                                  null      local
784844510dca   recipe-app-api_default                bridge    local
b8d28db3699c   saas_tenants_default                  bridge    local
45a2b62f76c7   tenants_default                       bridge    local
(django-bank)
USER@PCWORK MINGW64 ~/Documents/udemy/django-bank (main)


docker compose -f local.yml config

docker-compose.exe -f .\local.yml up --build -d --remove-orphans


https://nginx.org/en/docs/example.html


PS C:\Users\USER\Documents\udemy\django-bank> pipenv shell
Shell for C:\Users\USER\.virtualenvs\django-bank-a8sFsD6u already activated.
New shell not activated to avoid nested environments.



Portainer docker-desktop instalar


pip install --user pipenv
pipenv shell
pipenv install --dev watchfiles==0.22.0


problemas en ubuntu
docker pull postgres:16-bullseye
docker pull nginx:1.27.0-alpine

problemas con la carpeta de logs/
crear una dentro del repo para evitar problemas de permisos con el Dockerfile de django


failed to resolve source metadata for docker.io/library/nginx:1.27.0-alpine3.19-slim: error getting credentials - err: exit status 1, out: ``
 :> hacer login en docker hub para evitar esto

revisar permisos:

odm@PCWORK:~/udemy/django-bank$ docker compose -f local.yml run --rm api bash

django@f754ebe510fe:/app$ ls -ld app/
ls: cannot access 'app/': No such file or directory
django@f754ebe510fe:/app$ ls
Makefile  Pipfile.lock  core_apps  interceptor.py  logs       notas.txt     staticfiles
Pipfile   config        docker     local.yml       manage.py  requirements
django@f754ebe510fe:/app$ ls -ld logs
drwxr-xr-x 2 django django 4096 Aug 28 19:45 logs
django@f754ebe510fe:/app$ ls -ld staticfiles/
drwxr-xr-x 2 root root 4096 Aug 28 17:24 staticfiles/
django@f754ebe510fe:/app$  cd ..
django@f754ebe510fe:/$ ls -ld app/
drwxr-xr-x 11 django django 4096 Aug 28 19:45 app/
django@f754ebe510fe:/$

  -> en el host usar: sudo chown -R $USER:$USER staticfiles logs



Very nice course so far, thanks!



In terms of the Makefile, I just wanted to offer what worked for me on Windows. I had Docker Desktop already installed and I followed these steps:



- Run the wsl --install command in a Powershell as admin

- This installed (at least for me) an Ubuntu distro

- I activated this using this command in the terminal: wsl -d Ubuntu

- You can set it as default using: wsl --set-default Ubuntu

- Follow the rest of the instructions to install Make

- Open Docker Desktop go to Resources -> WSL Integration and enable the Ubuntu distro

- Restart Docker Desktop and launch a new powershell terminal

- Activate the WSL using wsl -d Ubuntu

- Navigate to your project but keep in mind your Windows drives are automatically mounted under the /mnt directory. So C:\Users\YourUser\Project would be /mnt/c/Users/YourUser/Project

- Run your Makefile with the make commands



cada que se crea un modelo o cambia:
make makemigrations
make migrate
make build


rabbitmq:
guest/guest